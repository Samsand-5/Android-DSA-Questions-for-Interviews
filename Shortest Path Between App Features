Your app has a feature navigation graph represented as an adjacency list. Write an algorithm to find the shortest path between two features.

fun shortestPath(graph: Map<String, List<String>>, start: String, end: String): Int {
    val queue = ArrayDeque<Pair<String, Int>>() // Pair of node and distance
    val visited = mutableSetOf<String>()

    queue.add(start to 0)

    while (queue.isNotEmpty()) {
        val (node, distance) = queue.removeFirst()
        if (node == end) return distance

        if (node !in visited) {
            visited.add(node)
            graph[node]?.forEach { neighbor ->
                queue.add(neighbor to distance + 1)
            }
        }
    }

    return -1 // No path found
}

fun main() {
    val graph = mapOf(
        "Home" to listOf("Profile", "Settings"),
        "Profile" to listOf("Home", "Gallery"),
        "Settings" to listOf("Home"),
        "Gallery" to listOf("Profile")
    )
    println(shortestPath(graph, "Home", "Gallery")) // Output: 2
}

Use Breadth-First Search (BFS).
